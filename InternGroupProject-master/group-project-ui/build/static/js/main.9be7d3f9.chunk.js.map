{"version":3,"sources":["modules/common/redux/redux.constants.js","modules/common/api/api.client.js","modules/cart/cart.service.js","modules/cart/retrieve-cart/retrieve-cart.slice.js","modules/pages/product-page/product-page.component.jsx","modules/pages/pages.config.js","modules/pages/home-page/home-page.component.jsx","modules/pages/layouts/root.layout.jsx","App.js","reportWebVitals.js","modules/cart/cart.reducer.js","modules/common/redux/redux.store.js","index.js"],"names":["RequestStatus","apiClient","axios","create","baseURL","initialState","status","response","undefined","error","requestParams","retrieveCartSlice","createSlice","name","reducers","retrieveCartStart","state","action","cartId","payload","retrieveCartSuccess","retrieveCartError","extraReducers","actions","retrieveCart","async","dispatch","get","concat","then","resp","data","cartService","err","message","sampleProducts","id","price","description","spice","routes","path","linkText","routeComponent","ProductsPageComponent","useEffect","console","log","products","setProducts","useState","selectedProduct","setSelectedProduct","searchTerm","setSearchTerm","filteredProducts","filter","product","toLowerCase","includes","_jsxs","children","_jsx","type","placeholder","value","onChange","event","target","onClick","addToCart","cart","JSON","parse","localStorage","getItem","push","setItem","stringify","alert","handleBackToList","map","handleProductClick","exact","HomePageComponent","_retrieveCartState$re","useDispatch","retrieveCartState","useSelector","Container","maxWidth","Box","my","Typography","variant","component","gutterBottom","style","color","display","justifyContent","CircularProgress","Button","mt","RootLayout","Router","rootRoutes","route","index","Link","to","Switch","Route","App","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","cartReducer","combineReducers","reducer","rootReducer","store","configureStore","ReactDOM","render","React","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9be7d3f9.chunk.js","sourcesContent":["\r\nexport const RequestStatus = {\r\n  IDLE: 'IDLE',\r\n  LOADING: 'LOADING',\r\n  SUCCESS: 'SUCCESS',\r\n  ERROR: 'ERROR'\r\n};\r\n","import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'https://localhost:5001'\r\n});\r\n\r\nexport default apiClient;\r\n","import apiClient from '../common/api/api.client';\r\n\r\nexport const retrieveCartById = (cartId) => {\r\n  return apiClient.get(`carts/${cartId}`).then(resp => resp.data);\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RequestStatus } from '../../common/redux/redux.constants';\r\nimport * as cartService from '../cart.service';\r\n\r\nconst initialState = {\r\n  status: RequestStatus.IDLE,\r\n  response: undefined,\r\n  error: undefined,\r\n  requestParams: undefined\r\n}\r\n\r\n// https://redux-toolkit.js.org/tutorials/quick-start\r\nexport const retrieveCartSlice = createSlice({\r\n  // The name of the reducer which will become the base property for this slice's state (e.g. state.cart.retrieveCart)\r\n  name: 'retrieveCart',\r\n  initialState,\r\n  reducers: {\r\n    // Set the status to 'LOADING' so components can determine when the response is in flight\r\n    retrieveCartStart: (state, action) => {\r\n      state.status = RequestStatus.LOADING;\r\n      state.requestParams = {\r\n        cartId: action.payload\r\n      }\r\n    },\r\n    // Set the response and change the status to 'SUCCESS' so components know the data is ready to be used\r\n    retrieveCartSuccess: (state, action) => {\r\n      state.status = RequestStatus.SUCCESS;\r\n      state.response = action.payload;\r\n    },\r\n    // Set the error object\r\n    retrieveCartError: (state, action) => {\r\n      state.status = RequestStatus.ERROR;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n  // Only necessary if you need to intercept actions handled by other slices to modify data in this slice of the state\r\n  extraReducers: {\r\n\r\n  }\r\n});\r\n\r\nconst {\r\n  retrieveCartStart,\r\n  retrieveCartSuccess,\r\n  retrieveCartError\r\n} = retrieveCartSlice.actions;\r\n\r\nexport const retrieveCart = (cartId) => async (dispatch) => {\r\n  dispatch(retrieveCartStart(cartId));\r\n  try {\r\n    const response = await cartService.retrieveCartById(cartId);\r\n    dispatch(retrieveCartSuccess(response));\r\n  } catch (err) {\r\n    dispatch(retrieveCartError(err?.message));\r\n  }\r\n}\r\n\r\nexport default retrieveCartSlice;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// Placeholder data for products (can be replaced with actual data fetching)\r\nconst sampleProducts = [\r\n  { id: 1, name: 'Heatwave Havoc', price: '$10.50', description: 'A fiery, heat bomb that is our hottest sauce--guaranteed to bring you tears.' , spice: 'Blazing'},\r\n  { id: 2, name: 'Chili Charge', price: '$9.70', description: 'A medium level chili-infused sauce that is sure to bring some heat! ', spice: 'Hot' },\r\n  { id: 3, name: 'Flame Frenzy', price: '$9.70', description: 'A fun, savory hot sauce to make your mouth tingle.', spice: 'Mild' },\r\n  { id: 4, name: 'Zesty Zing', price: '$10.20', description: 'Our version of sweet and tangy with some ZING!', spice: 'Mild'}\r\n];\r\n\r\nconst ProductsPageComponent = () => {\r\n    useEffect(() => {\r\n    console.log(\"ProductsPageComponent mounted\");\r\n  }, []);\r\n  const [products, setProducts] = useState([]);\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n   const [searchTerm, setSearchTerm] = useState(''); \r\n\r\n  useEffect(() => {\r\n    // Simulate data fetching\r\n    setProducts(sampleProducts);\r\n  }, []);\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  }\r\n\r\n  const filteredProducts = products.filter(product => \r\n    product.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const handleProductClick = (product) => {\r\n    setSelectedProduct(product);\r\n  };\r\n  \r\n  const addToCart = () => {\r\n    const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n    cart.push(selectedProduct);\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    alert(`${selectedProduct.name} added to cart!`);\r\n  };\r\n\r\n  const handleBackToList = () => {\r\n    setSelectedProduct(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Products</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search products...\"\r\n        value={searchTerm}\r\n        onChange={handleSearchChange}\r\n      />\r\n      {selectedProduct ? (\r\n        <div>\r\n          <h2>{selectedProduct.name}</h2>\r\n          <p>{selectedProduct.description}</p>\r\n          <p>Price: {selectedProduct.price}</p>\r\n          <p>Heat Level: {selectedProduct.spice}</p>\r\n          <button onClick={addToCart}>Add to Cart</button>\r\n          <button onClick={handleBackToList}>Back to Products</button>\r\n        </div>\r\n      ) : (\r\n        <ul>\r\n          {filteredProducts.map(product => (\r\n            <li key={product.id} onClick={() => handleProductClick(product)}>\r\n              {product.name} - {product.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsPageComponent;","import HomePageComponent from './home-page/home-page.component';\r\nimport ProductsPageComponent from './product-page/product-page.component';\r\n\r\n// Page for navbar!!!\r\n\r\n\r\n// Example component to demonstrate routing with multiple pages\r\nconst TestComp = () => (\r\n  <div>Products</div>\r\n)\r\n\r\n// Config for root routes to easily add/omit routes\r\n// NOTE: Including linkText property will include route in navigation menu; omit this property for routes which shouldn't be in navigation\r\n// NOTE: You may need to update this config with more properties and map to the RootLayout if more complex routes are required\r\nexport const routes = [\r\n  { path: '/products', linkText: 'Products', routeComponent: ProductsPageComponent, exact: true },\r\n  // Currently a fallback route which will match if any routes above are not exactly matched\r\n  // NOTE: Fallback routes should always be last\r\n  { path: '/', linkText: 'Home', routeComponent: HomePageComponent, exact: false },\r\n];\r\n\r\nexport default routes;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { retrieveCart } from '../../cart/retrieve-cart/retrieve-cart.slice';\r\nimport { RequestStatus } from '../../common/redux/redux.constants';\r\nimport { Button, CircularProgress, Typography, Container, Box } from '@material-ui/core';\r\n\r\nexport const HomePageComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const retrieveCartState = useSelector(state => state.cart.retrieveCart);\r\n\r\n  useEffect(() => {\r\n    dispatch(retrieveCart(1));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Box my={4}>\r\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom style={{ color: 'red' }}>\r\n          Blaster Bomb Hot Sauce\r\n        </Typography>\r\n        {retrieveCartState.status === RequestStatus.LOADING ? (\r\n          <Box display=\"flex\" justifyContent=\"center\" my={2}>\r\n            <CircularProgress data-testid='loading-spinner' />\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              onClick={() => dispatch(retrieveCart(1))}\r\n            >\r\n              Retrieve Cart\r\n            </Button>\r\n            <Box mt={2}>\r\n              <Typography variant=\"h6\">\r\n                Current Cart ID: {retrieveCartState?.response?.cartId || 'N/A'}\r\n              </Typography>\r\n              <Typography variant=\"body1\">\r\n                {JSON.stringify(retrieveCartState?.response, null, 2)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomePageComponent;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport rootRoutes from '../pages.config';\r\nimport './root.layout.css'; // Import the CSS file\r\n\r\nexport const RootLayout = () => (\r\n  \r\n  <Router>\r\n    {/* <nav className=\"navbar\"> */}\r\n      <ul>\r\n        {rootRoutes.filter(route => !!route.linkText).map((route, index) => (\r\n          <li key={index}>\r\n            <Link to={route.path}>{route.linkText}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    {/* </nav> */}\r\n    <Switch>\r\n      {rootRoutes.map((route, index) => (\r\n        <Route exact={route.exact} key={index} path={route.path} component={route.routeComponent} />\r\n      ))}\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default RootLayout;","import './App.css';\r\nimport RootLayout from './modules/pages/layouts/root.layout';\r\n\r\nfunction App() {\r\n  return (\r\n    <RootLayout />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport retrieveCartSlice from './retrieve-cart/retrieve-cart.slice';\r\n\r\nconst cartReducer = combineReducers({\r\n  retrieveCart: retrieveCartSlice.reducer\r\n});\r\n\r\nexport default cartReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport cartReducer from \"../../cart/cart.reducer\";\r\n\r\n// Add reducers from other modules to the store here\r\n// These will be the root properties accessible from the state (e.g. state.cart)\r\nconst rootReducer = combineReducers({\r\n  cart: cartReducer\r\n});\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport store from './modules/common/redux/redux.store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}